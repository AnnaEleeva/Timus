public class CharArrayCmpTask{
    public int compare(char[] arr1, char[] arr2){
        ...
    }
}


---------
Хотим функцию по лексикографическому сравнению строк:
А < АА < ААА < ААБ < ААВ < АБ < Б < … < ЯЯЯ

public int compare(char[] arr1, char[] arr2){

    int arr1Length=arr1.length(); //2
    int arr2Length=arr2.length(); //1

    for(int i=0;i<arr1.length();i++){

        if(arr1Length>0 && arr2Length>0){
            arr1Length--;
            arr2Length--;

            if(arr1[i]==arr2[i]){
             continue;
            }
            else if(arr1[i]>arr2[i]){
                return 1;
            }
            else if(arr1[i]<arr2[i]){
                return -1;
            }

        }
        else{
            break;
        }
    }
    if(arr1Length>0)return 1;
    if(arr2Length>0) return -1;
return 0;
}


compare([AA], [A]) == 1


----------------------------
Есть функция random2(), возвращающая равновероятно 0 или 1. Как с помощью нее сделать random4()?


public int random4(){

    if (random2()==0){

        if(random2()==0){
            return 0;   1/2*1/2
        }
        else return 1;

    }else{
         if(random2()==0){
            return 2;
        }
        else return 3;

    }

}
-------------------------
void bubble_sort(int[] arr){

    for(int arrLen=0;arrLen<arr.length-1;arrLen++){
        for(int i=0;i<arr.length()-1;i++){

                if(arr[i]>arr[i+1]){
                    int temp=arr[i];
                    arr[i]=arr[i+1];
                    arr[i+1]=temp;
                 }
        }
    }


}
---------------------------------------------------------------------------
next - возвр след
hasNext - true/false

public interface Iterator<E> {
    /**
     * Returns {@code true} if the iteration has more elements.
     * (In other words, returns {@code true} if {@link #next} would
     * return an element rather than throwing an exception.)
     *
     * @return {@code true} if the iteration has more elements
     */
    boolean hasNext();

    /**
     * Returns the next element in the iteration.
     *
     * @return the next element in the iteration
     * @throws NoSuchElementException if the iteration has no more elements
     */
    E next();
}



public class Realisation implements Iterator<Integer>{

    <Integer> ArrayList listNumbers=new  ArrayList()<>;
    private int currentIndex=0;

    boolean hasNext(){
         if((currentIndex<listNumbers.length) && (listNumbers[currentIndex]!=null)){

                if (listNumbers[currentIndex]%2==0)){
                     return true;
                }
                else{
                    currentIndex++;
                   return hasNext();
                }
         else {return false;}

    }

    Integer next(){
        if(hasNext()){
          return  listNumbers[currentIndex++];
        }
        else{
            currentIndex++;
            next();
        }
    }

}





